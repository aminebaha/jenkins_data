from kubernetes import client, config
import re

# Charger la configuration Kubernetes (assurez-vous que le contexte est correct)
config.load_kube_config()

def get_deployment_image_tags(namespaces, previous_revisions=5):
    v1_apps = client.AppsV1Api()
    
    # Créer une liste pour stocker les images
    image_list = []

    # Parcourir chaque namespace donné
    for namespace in namespaces:
        print(f"Namespace: {namespace}")

        # Lister tous les déploiements dans le namespace
        deployments = v1_apps.list_namespaced_deployment(namespace).items
        
        # Lister tous les ReplicaSets dans le namespace une seule fois
        replica_sets = v1_apps.list_namespaced_replica_set(namespace).items
        # Créer un dictionnaire pour accéder rapidement aux ReplicaSets
        rs_dict = {}
        for rs in replica_sets:
            if rs.metadata.owner_references:
                for ref in rs.metadata.owner_references:
                    if ref.kind == "Deployment":
                        rs_dict[ref.name] = rs  # Stocker le ReplicaSet par nom de déploiement
        
        # Parcourir chaque déploiement
        for deploy in deployments:
            deployment_name = deploy.metadata.name
            
            # Rechercher les containers qui suivent la règle
            expected_container_name = deployment_name.replace("-app", "")
            for container in deploy.spec.template.spec.containers:
                if re.match(expected_container_name, container.name):
                    image = container.image
                    # Ajouter l'image active à la liste
                    image_list.append({
                        'Namespace': namespace,
                        'Deployment': deployment_name,
                        'Image': image,
                        'Revision': 'Active'
                    })
                    
                    # Récupérer les révisions précédentes
                    print(f"Fetching last {previous_revisions} image tags for deployment {deployment_name}")

                    # Trouver le ReplicaSet correspondant
                    if deployment_name in rs_dict:
                        rs = rs_dict[deployment_name]
                        # Limiter à N révisions et récupérer les images
                        for i in range(min(previous_revisions, len(replica_sets))):
                            prev_image = rs.spec.template.spec.containers[0].image
                            image_list.append({
                                'Namespace': namespace,
                                'Deployment': deployment_name,
                                'Image': prev_image,
                                'Revision': f'Previous Revision {i + 1}'
                            })
                    
                    print("-" * 50)

    # Afficher la liste finale des images
    for img in image_list:
        print(f"{img['Namespace']} | {img['Deployment']} | {img['Image']} | {img['Revision']}")

# Utiliser la fonction pour un exemple de liste de namespaces
namespaces = ['namespace1', 'namespace2']  # Remplacer par les namespaces réels
get_deployment_image_tags(namespaces, previous_revisions=3)  # Par exemple, récupérer les 3 dernières révisions































import requests
import concurrent.futures
from requests.auth import HTTPBasicAuth

# Fonction pour faire l'appel API pour chaque image
def push_image_to_harbor(source_image, api_url, username, password):
    """Effectue un appel API pour pousser une image vers Harbor en utilisant Basic Auth."""
    # Création des données à envoyer dans la requête
    payload = {
        'source_image': source_image,
        'target_registry': 'harbor.example.com',  # Remplacer par l'URL de votre registre Harbor
    }

    try:
        # Faire l'appel API pour transférer l'image avec Basic Auth
        response = requests.post(api_url, auth=HTTPBasicAuth(username, password), json=payload)
        response.raise_for_status()  # Lève une exception si le statut HTTP indique une erreur
        print(f"Succès: L'image {source_image} a été transférée.")
        return response.json()  # Retourner la réponse JSON si besoin
    except requests.exceptions.HTTPError as err:
        print(f"Erreur HTTP pour l'image {source_image}: {err}")
    except Exception as err:
        print(f"Erreur inattendue pour l'image {source_image}: {err}")

# Fonction pour gérer l'exécution concurrente
def push_images_concurrently(image_list, api_url, username, password, max_workers=5):
    """Pousse les images en parallèle en utilisant un pool de threads avec Basic Auth."""
    
    # Utilisation de concurrent.futures pour exécuter plusieurs appels API en parallèle
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        # Soumettre toutes les tâches pour chaque image
        future_to_image = {executor.submit(push_image_to_harbor, image, api_url, username, password): image for image in image_list}

        # Attendre que toutes les futures se terminent et gérer les résultats
        for future in concurrent.futures.as_completed(future_to_image):
            image = future_to_image[future]
            try:
                data = future.result()
                if data:
                    print(f"Image {image} transférée avec succès : {data}")
            except Exception as exc:
                print(f"L'image {image} a généré une exception : {exc}")

# Exemple d'utilisation
if __name__ == "__main__":
    api_url = "https://api.example.com/transfer-image"  # Remplacer par l'URL de votre API
    username = "your_username"  # Remplacer par ton nom d'utilisateur
    password = "your_password"  # Remplacer par ton mot de passe

    image_list = [
        'registry.example.com/my-namespace/my-image:latest',
        'registry.example.com/my-namespace/my-image:v1.2.0',
        # Ajouter d'autres images ici
    ]

    # Appeler la fonction pour pousser les images de manière concurrente
    push_images_concurrently(image_list, api_url, username, password, max_workers=10)
