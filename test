from kubernetes import client, config
import re

# Charger la configuration Kubernetes (assurez-vous que le contexte est correct)
config.load_kube_config()

# Définir une fonction pour récupérer les déploiements et les tags d'images
def get_deployment_image_tags(namespaces, previous_revisions=5):
    v1_apps = client.AppsV1Api()

    # Parcourir chaque namespace donné
    for namespace in namespaces:
        print(f"Namespace: {namespace}")
        
        # Lister les déploiements dans le namespace
        deployments = v1_apps.list_namespaced_deployment(namespace)
        
        # Parcourir chaque déploiement
        for deploy in deployments.items:
            deployment_name = deploy.metadata.name
            
            # Rechercher les containers qui suivent la règle (nom du container == deployment sans "-app")
            expected_container_name = deployment_name.replace("-app", "")
            for container in deploy.spec.template.spec.containers:
                if re.match(expected_container_name, container.name):
                    image = container.image
                    image_tag = image.split(":")[-1] if ":" in image else "latest"
                    print(f"Deployment: {deployment_name}, Container: {container.name}, Active Image Tag: {image_tag}")
                    
                    # Récupérer les révisions précédentes
                    print(f"Fetching last {previous_revisions} image tags for deployment {deployment_name}")
                    replica_sets = v1_apps.list_namespaced_replica_set(namespace)
                    
                    # Filtrer les ReplicaSets liés à ce déploiement et les trier par révision
                    related_replica_sets = [
                        rs for rs in replica_sets.items if rs.metadata.owner_references and 
                        any(ref.kind == "Deployment" and ref.name == deployment_name for ref in rs.metadata.owner_references)
                    ]
                    
                    # Trier par révision (annotation kubernetes.io/change-cause ou autre méthode)
                    related_replica_sets.sort(key=lambda rs: int(rs.metadata.annotations.get("deployment.kubernetes.io/revision", "0")), reverse=True)
                    
                    # Limiter à N révisions et récupérer les images
                    for i, rs in enumerate(related_replica_sets[:previous_revisions]):
                        prev_image = rs.spec.template.spec.containers[0].image
                        prev_image_tag = prev_image.split(":")[-1] if ":" in prev_image else "latest"
                        print(f"  Previous Revision {i+1}: {prev_image_tag}")
                    
                    print("-" * 50)

# Utiliser la fonction pour un exemple de liste de namespaces
namespaces = ['namespace1', 'namespace2']  # Remplacer par les namespaces réels
get_deployment_image_tags(namespaces, previous_revisions=3)  # Par exemple, récupérer les 3 dernières révisions
